// –≠–ö–°–¢–†–ï–ù–ù–´–ô –î–ï–ë–ê–ì - –î–û–ë–ê–í–¨–¢–ï –í –°–ê–ú–û–ï –ù–ê–ß–ê–õ–û
console.log('üéÆ game.js –ó–ê–ì–†–£–ñ–ï–ù!');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
window.addEventListener('error', function(e) {
    console.error('üí• –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê:', e.error);
    console.error('üìç –í —Ñ–∞–π–ª–µ:', e.filename, '—Å—Ç—Ä–æ–∫–∞:', e.lineno);
    return true;
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω!');
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –í–°–ï–ì–û
    setTimeout(function() {
        console.log('üöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
        
        // 1. –£–±–∏—Ä–∞–µ–º –≤—Å–µ CSS –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        document.querySelectorAll('*').forEach(el => {
            el.style.pointerEvents = 'auto';
            el.style.userSelect = 'auto';
            el.style.webkitUserSelect = 'auto';
        });
        
        // 2. –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        const buttons = document.querySelectorAll('button');
        console.log('üéØ –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫:', buttons.length);
        
        buttons.forEach((btn, index) => {
            btn.disabled = false;
            btn.style.opacity = '1';
            btn.style.cursor = 'pointer';
        });
        
        console.log('üéâ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    }, 1000);
});

class CoinFlipCasino {
    constructor() {
        this.playerId = 'player_' + Math.random().toString(36).substr(2, 9);
        this.balance = 1000;
        this.currentBet = null;
        this.currentAmount = 100;
        this.isFlipping = false;
        this.gameMode = 'single';
        this.bankAmount = 0;
        
        // –ë–ê–õ–ê–ù–° –ö–ê–ó–ò–ù–û
        this.casinoBalance = 0;
        this.casinoCommission = 0;
        
        // –°–ò–°–¢–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ú–ê–†–¢–ò–ù–ì–ï–ô–õ–ê
        this.lastGameTime = 0;
        this.martingaleDetectionCount = 0;
        this.consecutiveGames = 0;
        
        this.stats = {
            gamesPlayed: 0,
            wins: 0,
            losses: 0,
            totalWin: 0,
            lossStreak: 0,
            winStreak: 0
        };

        this.gamesHistory = [];
        this.leaders = [];
        
        // –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä
        this.multiplayer = new MultiplayerManager(this);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        this.serverStats = {
            online: 0,
            rooms: 0,
            queue: 0,
            totalGames: 0,
            peakOnline: 0
        };

        this.initializeEventListeners();
        this.loadPlayerData();
        this.multiplayer.connect();
        
        console.log('üé∞ CoinFlip Casino –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    }

    // üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –®–ê–ù–°–û–í –î–õ–Ø –û–î–ò–ù–û–ß–ù–û–ô –ò–ì–†–´
    calculateSingleWinProbability() {
        const totalGames = this.stats.gamesPlayed;
        const balanceRatio = this.balance / 1000;
        const betRatio = this.currentAmount / this.balance;
        
        console.log(`üéØ –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–∫–∞: –ë–∞–ª–∞–Ω—Å ${this.balance}‚ÇΩ (x${balanceRatio.toFixed(1)}), –°—Ç–∞–≤–∫–∞ ${this.currentAmount}‚ÇΩ, –ò–≥—Ä: ${totalGames}`);

        // üéÅ –ó–ê–ú–ê–ù–ò–í–ê–ù–ò–ï –ù–û–í–ò–ß–ö–û–í
        if (totalGames < 3) {
            console.log(`üéÅ –û–¥–∏–Ω–æ—á–Ω–∞—è: –Ω–æ–≤–∏—á–æ–∫ - —à–∞–Ω—Å 70%`);
            return 0.70;
        }
        
        // üîç –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ú–ê–†–¢–ò–ù–ì–ï–ô–õ-–°–¢–†–ê–¢–ï–ì–ò–ò
        const isMartingale = this.detectMartingaleStrategy();
        if (isMartingale) {
            this.martingaleDetectionCount++;
            console.log(`üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è! (${this.martingaleDetectionCount} —Ä–∞–∑) –®–∞–Ω—Å 35%`);
            
            // –ü–æ—Å–ª–µ 3 –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π - –µ—â–µ –±–æ–ª—å—à–µ —Å–Ω–∏–∂–∞–µ–º —à–∞–Ω—Å—ã
            if (this.martingaleDetectionCount >= 3) {
                console.log(`üéØ –£—Å–∏–ª–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª–∞! –®–∞–Ω—Å 25%`);
                return 0.25;
            }
            return 0.35;
        }
        
        // üîÅ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –ü–û–°–õ–ï –ü–†–û–ò–ì–†–´–®–ï–ô (–Ω–æ –Ω–µ –¥–ª—è –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª–∞)
        if (this.stats.lossStreak >= 3) {
            console.log(`üîÅ –û–¥–∏–Ω–æ—á–Ω–∞—è: –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–æ—Å–ª–µ ${this.stats.lossStreak} –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π - 55%`);
            return 0.55;
        }
        
        // üìâ –ö–û–ù–¢–†–û–õ–¨ –ë–ê–õ–ê–ù–°–ê - –°–õ–ò–í –£–°–ü–ï–®–ù–´–•
        if (balanceRatio > 1.8) {
            console.log(`üìâ –û–¥–∏–Ω–æ—á–Ω–∞—è: –±–∞–ª–∞–Ω—Å x${balanceRatio.toFixed(1)} - —Å–ª–∏–≤ 20%`);
            return 0.20;
        }
        
        if (balanceRatio > 1.4) {
            console.log(`üìâ –û–¥–∏–Ω–æ—á–Ω–∞—è: –±–∞–ª–∞–Ω—Å x${balanceRatio.toFixed(1)} - —Å–Ω–∏–∂–µ–Ω–∏–µ 35%`);
            return 0.35;
        }
        
        // üí∏ –ö–†–£–ü–ù–´–ï –°–¢–ê–í–ö–ò - –í–´–ñ–ò–ú–ê–ï–ú –ú–ê–ö–°–ò–ú–£–ú
        if (this.currentAmount > 400) {
            console.log(`üí∏ –û–¥–∏–Ω–æ—á–Ω–∞—è: –∫—Ä—É–ø–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ${this.currentAmount} - —à–∞–Ω—Å 30%`);
            return 0.30;
        }
        
        if (this.currentAmount > 150) {
            console.log(`üí∏ –û–¥–∏–Ω–æ—á–Ω–∞—è: —Å—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ ${this.currentAmount} - —à–∞–Ω—Å 40%`);
            return 0.40;
        }
        
        // üé∞ –°–¢–ê–ù–î–ê–†–¢ - –°–¢–ê–ë–ò–õ–¨–ù–´–ô –î–û–•–û–î –ö–ê–ó–ò–ù–û
        if (this.stats.winStreak >= 2) {
            console.log(`üé∞ –û–¥–∏–Ω–æ—á–Ω–∞—è: —Å–µ—Ä–∏—è –ø–æ–±–µ–¥ ${this.stats.winStreak} - —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–æ 45%`);
            return 0.45;
        }
        
        console.log(`üé∞ –û–¥–∏–Ω–æ—á–Ω–∞—è: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–Ω—Å 48%`);
        return 0.48;
    }

    // üîç –ú–ï–¢–û–î –î–õ–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ú–ê–†–¢–ò–ù–ì–ï–ô–õ-–°–¢–†–ê–¢–ï–ì–ò–ò
    detectMartingaleStrategy() {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –∏–≥—Ä
        const recentGames = this.gamesHistory.slice(0, 6);
        
        if (recentGames.length < 3) return false;
        
        let martingaleSigns = 0;
        let totalSignsPossible = 0;
        
        // –ü—Ä–∏–∑–Ω–∞–∫–∏ –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª–∞:
        for (let i = 1; i < recentGames.length; i++) {
            const prevGame = recentGames[i];
            const currentGame = recentGames[i-1];
            
            totalSignsPossible += 3; // –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–∏–∑–Ω–∞–∫–∞ –Ω–∞ –ø–∞—Ä—É –∏–≥—Ä
            
            // 1. –£–¥–≤–æ–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
            if (!prevGame.win && currentGame.amount === prevGame.amount * 2) {
                martingaleSigns += 2; // –°–∏–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫
                console.log(`üîç –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª-–ø—Ä–∏–∑–Ω–∞–∫: —É–¥–≤–æ–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞`);
            }
            
            // 2. –°–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
            if (!prevGame.win && currentGame.bet !== prevGame.bet) {
                martingaleSigns += 1;
                console.log(`üîç –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª-–ø—Ä–∏–∑–Ω–∞–∫: —Å–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞`);
            }
            
            // 3. –ë—ã—Å—Ç—Ä–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫
            if (currentGame.amount > prevGame.amount * 1.8) {
                martingaleSigns += 1;
                console.log(`üîç –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª-–ø—Ä–∏–∑–Ω–∞–∫: –±—ã—Å—Ç—Ä–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏`);
            }
            
            // 4. –ú–∞–ª–µ–Ω—å–∫–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Å —Ä–æ—Å—Ç–æ–º
            if (prevGame.amount <= 25 && currentGame.amount <= 50 && currentGame.amount > prevGame.amount) {
                martingaleSigns += 1;
            }
        }
        
        // 5. –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∏–≥—Ä—ã
        const now = Date.now();
        if (this.lastGameTime > 0 && (now - this.lastGameTime) < 2500) {
            martingaleSigns += 2;
            console.log(`üîç –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª-–ø—Ä–∏–∑–Ω–∞–∫: —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∏–≥—Ä—ã`);
        }
        
        // 6. –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ —Å–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞
        const betChanges = this.countBetChanges(recentGames);
        if (betChanges >= 3) {
            martingaleSigns += 1;
            console.log(`üîç –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª-–ø—Ä–∏–∑–Ω–∞–∫: –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–∞—è —Å–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞`);
        }
        
        // –ï—Å–ª–∏ –±–æ–ª—å—à–µ 40% –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª
        const martingaleRatio = totalSignsPossible > 0 ? martingaleSigns / totalSignsPossible : 0;
        const isMartingale = martingaleRatio > 0.4;
        
        if (isMartingale) {
            console.log(`üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è! –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: ${martingaleSigns}/${totalSignsPossible} (${Math.round(martingaleRatio * 100)}%)`);
        }
        
        return isMartingale;
    }

    // üìä –ü–û–î–°–ß–ï–¢ –°–ú–ï–ù –í–´–ë–û–†–ê
    countBetChanges(games) {
        let changes = 0;
        for (let i = 1; i < games.length; i++) {
            if (games[i].bet !== games[i-1].bet) {
                changes++;
            }
        }
        return changes;
    }

    // ‚è∞ –ü–†–û–í–ï–†–ö–ê –ß–ê–°–¢–û–¢–´ –ò–ì–†
    checkGameFrequency() {
        const now = Date.now();
        const lastGameTime = this.lastGameTime || 0;
        const timeDiff = now - lastGameTime;
        
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫–∏ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        if (timeDiff < 2000) {
            this.consecutiveGames++;
            console.log(`‚è∞ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞! ${this.consecutiveGames} –ø–æ–¥—Ä—è–¥`);
            
            // –ü–æ—Å–ª–µ 3 –±—ã—Å—Ç—Ä—ã—Ö –∏–≥—Ä –ø–æ–¥—Ä—è–¥ - –±–ª–æ–∫–∏—Ä—É–µ–º
            if (this.consecutiveGames >= 3) {
                this.showMessage('‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä—ã—Ö –∏–≥—Ä! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.');
                setTimeout(() => {
                    this.consecutiveGames = 0;
                    this.showMessage('‚úÖ –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–≥—Ä—É!');
                }, 10000);
                return false;
            }
        } else {
            this.consecutiveGames = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∂–¥–∞–ª
        }
        
        this.lastGameTime = now;
        return true;
    }

    initializeEventListeners() {
        // –¢–∞–±—ã
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                this.switchTab(e.target.dataset.tab);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫ (–æ–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞)
        document.querySelectorAll('.bet-btn').forEach(btn => {
            if (btn.id !== 'multiHeadsBtn' && btn.id !== 'multiTailsBtn') {
                btn.addEventListener('click', (e) => {
                    this.selectBet(e.target.dataset.bet);
                });
            }
        });

        // –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
        const customAmount = document.getElementById('customAmount');
        if (customAmount) {
            customAmount.addEventListener('input', (e) => {
                this.setAmount(parseInt(e.target.value) || 0);
            });
        }

        const doubleBtn = document.getElementById('doubleBtn');
        if (doubleBtn) {
            doubleBtn.addEventListener('click', () => {
                this.doubleAmount();
            });
        }

        const halfBtn = document.getElementById('halfBtn');
        if (halfBtn) {
            halfBtn.addEventListener('click', () => {
                this.halfAmount();
            });
        }

        // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–æ–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞)
        const flipBtn = document.getElementById('flipBtn');
        if (flipBtn) {
            flipBtn.addEventListener('click', () => {
                this.flipCoin();
            });
        }

        // –ë–æ–Ω—É—Å—ã
        const bonusBtn = document.getElementById('bonusBtn');
        if (bonusBtn) {
            bonusBtn.addEventListener('click', () => {
                this.getDailyBonus();
            });
        }

        const resetBtn = document.getElementById('resetBtn');
        if (resetBtn) {
            resetBtn.addEventListener('click', () => {
                this.resetBalance();
            });
        }

        // –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∫–Ω–æ–ø–∫–∏
        const multiAmount = document.getElementById('multiAmount');
        if (multiAmount) {
            multiAmount.addEventListener('input', (e) => {
                this.setMultiAmount(parseInt(e.target.value) || 0);
            });
        }

        const multiDoubleBtn = document.getElementById('multiDoubleBtn');
        if (multiDoubleBtn) {
            multiDoubleBtn.addEventListener('click', () => {
                this.doubleMultiAmount();
            });
        }

        const multiHalfBtn = document.getElementById('multiHalfBtn');
        if (multiHalfBtn) {
            multiHalfBtn.addEventListener('click', () => {
                this.halfMultiAmount();
            });
        }

        const findOpponentBtn = document.getElementById('findOpponentBtn');
        if (findOpponentBtn) {
            findOpponentBtn.addEventListener('click', () => {
                this.multiplayer.findOpponent(this.currentAmount);
            });
        }

        const cancelSearchBtn = document.getElementById('cancelSearchBtn');
        if (cancelSearchBtn) {
            cancelSearchBtn.addEventListener('click', () => {
                this.multiplayer.cancelSearch();
            });
        }

        const multiHeadsBtn = document.getElementById('multiHeadsBtn');
        if (multiHeadsBtn) {
            multiHeadsBtn.addEventListener('click', () => {
                this.multiplayer.makeBet('heads');
            });
        }

        const multiTailsBtn = document.getElementById('multiTailsBtn');
        if (multiTailsBtn) {
            multiTailsBtn.addEventListener('click', () => {
                this.multiplayer.makeBet('tails');
            });
        }

        const playAgainBtn = document.getElementById('playAgainBtn');
        if (playAgainBtn) {
            playAgainBtn.addEventListener('click', () => {
                this.multiplayer.playAgain();
            });
        }
    }

    switchTab(tabName) {
        document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        
        const activeTab = document.querySelector(`[data-tab="${tabName}"]`);
        const activeContent = document.getElementById(`${tabName}-tab`);
        
        if (activeTab) activeTab.classList.add('active');
        if (activeContent) activeContent.classList.add('active');
        
        this.gameMode = tabName;
        
        if (tabName === 'multiplayer') {
            this.multiplayer.updateUI();
        }
        
        this.updateUI();
    }

    selectBet(bet) {
        if (this.isFlipping) return;

        this.currentBet = bet;
        
        document.querySelectorAll('.bet-btn').forEach(btn => {
            if (btn.id !== 'multiHeadsBtn' && btn.id !== 'multiTailsBtn') {
                btn.classList.remove('active');
            }
        });
        document.querySelectorAll(`[data-bet="${bet}"]`).forEach(btn => {
            btn.classList.add('active');
        });
        
        this.checkReadyState();
    }

    setAmount(amount) {
        if (amount < 10) amount = 10;
        if (amount > this.balance) amount = this.balance;
        
        this.currentAmount = amount;
        const customAmount = document.getElementById('customAmount');
        if (customAmount) customAmount.value = amount;
        
        this.checkReadyState();
    }

    setMultiAmount(amount) {
        if (amount < 10) amount = 10;
        if (amount > this.balance) amount = this.balance;
        
        this.currentAmount = amount;
        const multiAmount = document.getElementById('multiAmount');
        const searchAmount = document.getElementById('searchAmount');
        
        if (multiAmount) multiAmount.value = amount;
        if (searchAmount) searchAmount.textContent = amount;
    }

    doubleAmount() {
        let newAmount = this.currentAmount * 2;
        if (newAmount > this.balance) newAmount = this.balance;
        this.setAmount(newAmount);
    }

    doubleMultiAmount() {
        let newAmount = this.currentAmount * 2;
        if (newAmount > this.balance) newAmount = this.balance;
        this.setMultiAmount(newAmount);
    }

    halfAmount() {
        let newAmount = Math.floor(this.currentAmount / 2);
        if (newAmount < 10) newAmount = 10;
        this.setAmount(newAmount);
    }

    halfMultiAmount() {
        let newAmount = Math.floor(this.currentAmount / 2);
        if (newAmount < 10) newAmount = 10;
        this.setMultiAmount(newAmount);
    }

    checkReadyState() {
        const flipBtn = document.getElementById('flipBtn');
        if (!flipBtn) return;
        
        const canPlay = this.currentBet && this.currentAmount >= 10 && this.currentAmount <= this.balance;
        flipBtn.disabled = !canPlay || this.isFlipping;
    }

    async flipCoin() {
        if (this.isFlipping || !this.currentBet || this.currentAmount < 10) return;
        
        // –ü–†–û–í–ï–†–ö–ê –ß–ê–°–¢–û–¢–´ –ò–ì–†
        if (!this.checkGameFrequency()) {
            return;
        }
        
        this.isFlipping = true;
        const flipBtn = document.getElementById('flipBtn');
        if (flipBtn) flipBtn.disabled = true;

        // –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏
        this.balance -= this.currentAmount;
        this.updateUI();

        // –ê–Ω–∏–º–∞—Ü–∏—è
        const coin = document.getElementById('coin');
        if (coin) coin.classList.add('flipping');

        try {
            const result = this.flipCoinLocal();
            
            setTimeout(() => {
                if (coin) coin.classList.remove('flipping');
                this.processResult(result);
                this.isFlipping = false;
            }, 1500);

        } catch (error) {
            console.error('Error:', error);
            this.isFlipping = false;
        }
    }

    flipCoinLocal() {
        // üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–ú–ù–£–Æ –°–ò–°–¢–ï–ú–£ –í–ú–ï–°–¢–û 50/50
        const winProbability = this.calculateSingleWinProbability();
        const playerWins = Math.random() < winProbability;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–∏–≥—Ä—ã—à–∞
        const result = playerWins ? this.currentBet : (this.currentBet === 'heads' ? 'tails' : 'heads');
        const winAmount = playerWins ? this.currentAmount * 2 : 0;
        const commission = playerWins ? Math.floor(this.currentAmount * 0.1) : 0;
        
        console.log(`üé≤ –ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã: ${result} | –®–∞–Ω—Å: ${(winProbability * 100).toFixed(1)}% | –í—ã–∏–≥—Ä—ã—à: ${playerWins}`);
        
        return {
            result: result,
            win: playerWins,
            winAmount: winAmount - commission,
            commission: commission
        };
    }

    processResult(result) {
        const resultDiv = document.getElementById('result');
        if (!resultDiv) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å–µ—Ä–∏–∏
        this.stats.gamesPlayed++;
        
        if (result.win) {
            this.balance += result.winAmount;
            this.stats.wins++;
            this.stats.winStreak++;
            this.stats.lossStreak = 0;
            this.stats.totalWin += result.winAmount - this.currentAmount;
            
            // –ö–ê–ó–ò–ù–û –ü–û–õ–£–ß–ê–ï–¢ –ö–û–ú–ò–°–°–ò–Æ
            this.casinoBalance += result.commission;
            this.casinoCommission += result.commission;
            
            let message = `üéâ –í—ã–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª ${this.getRussianName(result.result)}! +${result.winAmount} ‚ÇΩ`;
            if (result.commission > 0) {
                message += ` (–∫–æ–º–∏—Å—Å–∏—è –∫–∞–∑–∏–Ω–æ: -${result.commission} ‚ÇΩ)`;
            }
            resultDiv.innerHTML = `<i class="fas fa-trophy"></i> ${message}`;
            resultDiv.className = 'result win';
        } else {
            this.stats.losses++;
            this.stats.lossStreak++;
            this.stats.winStreak = 0;
            this.stats.totalWin -= this.currentAmount;
            
            // –ö–ê–ó–ò–ù–û –ü–û–õ–£–ß–ê–ï–¢ –í–°–Æ –°–¢–ê–í–ö–£ –ü–†–ò –ü–†–û–ò–ì–†–´–®–ï
            this.casinoBalance += this.currentAmount;
            
            resultDiv.innerHTML = `<i class="fas fa-times"></i> –ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª–∞ ${this.getRussianName(result.result)}. -${this.currentAmount} ‚ÇΩ`;
            resultDiv.className = 'result lose';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.addToHistory({
            type: 'pve',
            bet: this.currentBet,
            amount: this.currentAmount,
            result: result.result,
            win: result.win,
            winAmount: result.winAmount,
            commission: result.commission,
            timestamp: new Date()
        });

        this.updateUI();
        this.saveGameData();
    }

    addToHistory(game) {
        this.gamesHistory.unshift(game);
        if (this.gamesHistory.length > 50) {
            this.gamesHistory = this.gamesHistory.slice(0, 50);
        }
        this.updateHistoryUI();
    }

    updateHistoryUI() {
        const historyList = document.getElementById('historyList');
        if (!historyList) return;
        
        historyList.innerHTML = '';
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const header = document.createElement('div');
        header.className = 'history-item';
        header.style.background = 'rgba(255, 255, 255, 0.15)';
        header.style.fontWeight = 'bold';
        header.innerHTML = `
            <div>–¢–∏–ø –∏–≥—Ä—ã</div>
            <div>–°—Ç–∞–≤–∫–∞</div>
            <div>–†–µ–∑—É–ª—å—Ç–∞—Ç</div>
            <div>–°—É–º–º–∞</div>
        `;
        historyList.appendChild(header);
        
        this.gamesHistory.forEach(game => {
            const item = document.createElement('div');
            item.className = `history-item ${game.win ? 'history-win' : 'history-lose'}`;
            
            const typeIcon = game.type === 'pve' ? 'ü§ñ' : 'üë•';
            const typeText = game.type === 'pve' ? '–ü—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞' : 'PvP';
            const betText = this.getRussianName(game.bet);
            const resultText = this.getRussianName(game.result);
            
            let amountText = '';
            let amountIcon = '';
            if (game.win) {
                amountText = `+${game.winAmount} ‚ÇΩ`;
                amountIcon = 'üü¢';
                if (game.commission > 0) {
                    amountText += ` (-${game.commission}‚ÇΩ)`;
                }
            } else {
                amountText = `-${game.amount} ‚ÇΩ`;
                amountIcon = 'üî¥';
            }
            
            item.innerHTML = `
                <div>${typeIcon} ${typeText}</div>
                <div>${betText}</div>
                <div>${resultText}</div>
                <div>${amountIcon} ${amountText}</div>
            `;
            historyList.appendChild(item);
        });

        // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è
        if (this.gamesHistory.length === 0) {
            const emptyItem = document.createElement('div');
            emptyItem.className = 'history-item';
            emptyItem.innerHTML = `
                <div colspan="4" style="text-align: center; opacity: 0.7;">
                    <i class="fas fa-history"></i> –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø—É—Å—Ç–∞
                </div>
            `;
            historyList.appendChild(emptyItem);
        }
    }

    async getDailyBonus() {
        try {
            const today = new Date().toDateString();
            const lastBonus = localStorage.getItem('lastBonus');
            
            if (lastBonus === today) {
                const bonusStatus = document.getElementById('bonusStatus');
                if (bonusStatus) bonusStatus.innerHTML = '<i class="fas fa-exclamation-triangle"></i> –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è';
                return;
            }
            
            this.balance += 100;
            localStorage.setItem('lastBonus', today);
            
            const bonusStatus = document.getElementById('bonusStatus');
            const bonusBtn = document.getElementById('bonusBtn');
            
            if (bonusStatus) bonusStatus.innerHTML = '<i class="fas fa-check"></i> +100 ‚ÇΩ –ø–æ–ª—É—á–µ–Ω–æ!';
            if (bonusBtn) bonusBtn.disabled = true;
            
            this.updateUI();
            this.saveGameData();
            
        } catch (error) {
            console.error('Bonus error:', error);
            const bonusStatus = document.getElementById('bonusStatus');
            if (bonusStatus) bonusStatus.innerHTML = '<i class="fas fa-times"></i> –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞';
        }
    }

    async resetBalance() {
        try {
            const twoWeeksAgo = Date.now() - (14 * 24 * 60 * 60 * 1000);
            const lastReset = localStorage.getItem('lastReset') || 0;
            
            if (this.balance > 0 || lastReset > twoWeeksAgo) {
                alert('‚ùå –°–±—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–∞–ª–∞–Ω—Å = 0 –∏ –ø—Ä–æ—à–ª–æ 2 –Ω–µ–¥–µ–ª–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞.');
                return;
            }
            
            this.balance = 1000;
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞
            this.stats.lossStreak = 0;
            this.stats.winStreak = 0;
            this.martingaleDetectionCount = 0;
            this.consecutiveGames = 0;
            localStorage.setItem('lastReset', Date.now());
            
            const resetBtn = document.getElementById('resetBtn');
            if (resetBtn) resetBtn.disabled = true;
            
            this.updateUI();
            this.saveGameData();
            alert('‚úÖ –ë–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω –¥–æ 1000 ‚ÇΩ');
            
        } catch (error) {
            console.error('Reset error:', error);
            alert('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞');
        }
    }

    getRussianName(side) {
        return side === 'heads' ? '–û–†–Å–õ' : '–†–ï–®–ö–ê';
    }

    // üì¢ –ú–ï–¢–û–î –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–ô
    showMessage(message) {
        const resultDiv = document.getElementById('result');
        if (resultDiv) {
            resultDiv.innerHTML = message;
            resultDiv.className = 'result';
            
            // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                if (resultDiv.innerHTML === message) {
                    resultDiv.innerHTML = '';
                    resultDiv.className = 'result';
                }
            }, 5000);
        }
    }

    updateUI() {
        // –ë–∞–ª–∞–Ω—Å –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.updateElement('balance', this.balance);
        this.updateElement('gamesPlayed', this.stats.gamesPlayed);
        this.updateElement('wins', this.stats.wins);
        this.updateElement('losses', this.stats.losses);
        this.updateElement('totalWin', this.stats.totalWin);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        this.updateElement('onlinePlayers', this.serverStats.online);
        this.updateElement('activeRooms', this.serverStats.rooms);
        this.updateElement('waitingQueue', this.serverStats.queue);
        this.updateElement('totalGames', this.serverStats.totalGames);
        this.updateElement('peakOnline', this.serverStats.peakOnline);

        // –û–Ω–ª–∞–π–Ω —Å—á–µ—Ç—á–∏–∫ –≤ —Ö–µ–¥–µ—Ä–µ
        const onlineCount = document.getElementById('onlineCount');
        if (onlineCount) {
            onlineCount.innerHTML = `<i class="fas fa-users"></i> ${this.serverStats.online}`;
        }

        // –ë–ê–õ–ê–ù–° –ö–ê–ó–ò–ù–û
        const casinoBalanceElement = document.getElementById('casinoBalance');
        if (!casinoBalanceElement) {
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            const balanceContainer = document.querySelector('.balance-container');
            if (balanceContainer) {
                const casinoElem = document.createElement('div');
                casinoElem.className = 'casino-balance';
                casinoElem.id = 'casinoBalance';
                casinoElem.innerHTML = `<i class="fas fa-landmark"></i> –ö–∞–∑–∏–Ω–æ: ${this.casinoBalance} ‚ÇΩ`;
                casinoElem.style.marginLeft = '20px';
                casinoElem.style.opacity = '0.8';
                casinoElem.style.fontSize = '14px';
                balanceContainer.appendChild(casinoElem);
            }
        } else {
            casinoBalanceElement.innerHTML = `<i class="fas fa-landmark"></i> –ö–∞–∑–∏–Ω–æ: ${this.casinoBalance} ‚ÇΩ`;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞
        const resetBtn = document.getElementById('resetBtn');
        if (resetBtn) resetBtn.disabled = this.balance > 0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
        const today = new Date().toDateString();
        const bonusUsed = localStorage.getItem('lastBonus') === today;
        const bonusBtn = document.getElementById('bonusBtn');
        if (bonusBtn) bonusBtn.disabled = bonusUsed;

        this.checkReadyState();
        this.updateHistoryUI();
    }

    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) element.textContent = value;
    }

    updateServerStats(stats) {
        this.serverStats = stats;
        this.updateUI();
    }

    saveGameData() {
        const gameData = {
            playerId: this.playerId,
            balance: this.balance,
            stats: this.stats,
            gamesHistory: this.gamesHistory,
            casinoBalance: this.casinoBalance,
            casinoCommission: this.casinoCommission,
            martingaleDetectionCount: this.martingaleDetectionCount,
            lastSave: Date.now()
        };
        localStorage.setItem('coinFlipData', JSON.stringify(gameData));
        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }

    loadGameData() {
        try {
            const saved = localStorage.getItem('coinFlipData');
            if (saved) {
                const data = JSON.parse(saved);
                this.playerId = data.playerId || this.playerId;
                this.balance = data.balance || 1000;
                this.stats = data.stats || this.stats;
                this.gamesHistory = data.gamesHistory || [];
                this.casinoBalance = data.casinoBalance || 0;
                this.casinoCommission = data.casinoCommission || 0;
                this.martingaleDetectionCount = data.martingaleDetectionCount || 0;
                
                console.log('üíæ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                console.log('üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ:', this.casinoBalance, '‚ÇΩ');
                console.log('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª–∞:', this.martingaleDetectionCount);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
class MultiplayerManager {
    constructor(gameInstance) {
        this.game = gameInstance;
        this.socket = null;
        this.state = 'disconnected';
        this.roomId = null;
        this.opponent = null;
        this.betTimer = 30;
        this.myBet = null;
        this.opponentBet = null;
        this.pingInterval = null;
        this.lastPingTime = 0;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 3;
    }

    connect() {
        try {
            const serverURL = 'wss://coinflip-gzhel.onrender.com';
            
            console.log(`üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ${serverURL}`);
            
            const connectionTimeout = setTimeout(() => {
                if (this.socket && this.socket.readyState === WebSocket.CONNECTING) {
                    console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
                    this.socket.close();
                    this.showMessage('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
                    this.state = 'disconnected';
                    this.updateConnectionStatus(false);
                }
            }, 8000);
            
            this.socket = new WebSocket(serverURL);
            
            this.socket.onopen = () => {
                clearTimeout(connectionTimeout);
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É');
                this.state = 'connected';
                this.reconnectAttempts = 0;
                this.updateConnectionStatus(true);
                
                this.socket.send(JSON.stringify({
                    type: 'auth',
                    playerId: this.game.playerId,
                    balance: this.game.balance
                }));
                
                this.startPing();
            };
            
            this.socket.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    this.handleMessage(data);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            };
            
            this.socket.onclose = (event) => {
                clearTimeout(connectionTimeout);
                console.log(`üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, event.code, event.reason);
                this.state = 'disconnected';
                this.updateConnectionStatus(false);
                
                this.stopPing();
                
                if (event.code !== 1000 && this.reconnectAttempts < this.maxReconnectAttempts) {
                    this.reconnectAttempts++;
                    const delay = Math.min(2000 * this.reconnectAttempts, 10000);
                    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay}–º—Å`);
                    
                    setTimeout(() => {
                        if (this.state === 'disconnected') {
                            this.connect();
                        }
                    }, delay);
                } else {
                    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
                        this.showMessage('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                    }
                }
            };
            
            this.socket.onerror = (error) => {
                clearTimeout(connectionTimeout);
                console.error('üí• –û—à–∏–±–∫–∞ WebSocket:', error);
                this.state = 'disconnected';
                this.updateConnectionStatus(false);
                this.showMessage('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            this.state = 'disconnected';
            this.updateConnectionStatus(false);
        }
    }

    handleMessage(data) {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.type, data);
        
        switch (data.type) {
            case 'auth_success':
                this.handleAuthSuccess(data);
                break;
            case 'searching':
                this.handleSearching(data);
                break;
            case 'opponent_found':
                this.handleOpponentFound(data);
                break;
            case 'timer_update':
                this.handleTimerUpdate(data);
                break;
            case 'bet_made':
                this.handleBetMade(data);
                break;
            case 'coin_flip_start':
                this.handleCoinFlipStart(data);
                break;
            case 'game_result':
                this.handleGameResult(data);
                break;
            case 'opponent_disconnected':
                this.handleOpponentDisconnected(data);
                break;
            case 'search_cancelled':
                this.handleSearchCancelled(data);
                break;
            case 'stats_update':
                this.game.updateServerStats(data);
                break;
            case 'pong':
                this.handlePong(data);
                break;
            case 'error':
                this.handleError(data);
                break;
        }
    }

    handleAuthSuccess(data) {
        this.state = 'connected';
        this.showMessage('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É');
        this.updateUI();
    }

    startPing() {
        this.pingInterval = setInterval(() => {
            this.lastPingTime = Date.now();
            if (this.socket && this.socket.readyState === WebSocket.OPEN) {
                this.socket.send(JSON.stringify({
                    type: 'ping'
                }));
            }
        }, 15000);
    }

    stopPing() {
        if (this.pingInterval) {
            clearInterval(this.pingInterval);
            this.pingInterval = null;
        }
    }

    handlePong(data) {
        const ping = Date.now() - this.lastPingTime;
        console.log(`üì° –ü–∏–Ω–≥: ${ping}–º—Å`);
    }

    findOpponent(amount) {
        if (this.state !== 'connected') {
            this.showMessage('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            return;
        }

        if (amount < 10 || amount > 10000) {
            this.showMessage('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ (10-10000 ‚ÇΩ)');
            return;
        }

        if (amount > this.game.balance) {
            this.showMessage('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏');
            return;
        }

        this.socket.send(JSON.stringify({
            type: 'find_opponent',
            betAmount: amount
        }));

        this.state = 'searching';
        this.updateUI();
    }

    cancelSearch() {
        if (this.state === 'searching') {
            this.socket.send(JSON.stringify({
                type: 'cancel_search'
            }));
            this.state = 'connected';
            this.updateUI();
        }
    }

    makeBet(bet) {
        if (this.state !== 'betting') {
            this.showMessage('‚ùå –ù–µ —Å–µ–π—á–∞—Å');
            return;
        }

        this.socket.send(JSON.stringify({
            type: 'make_bet',
            bet: bet,
            roomId: this.roomId
        }));

        this.myBet = bet;
        this.updateUI();
    }

    handleSearching(data) {
        this.state = 'searching';
        this.updateElement('queuePosition', data.queuePosition || 1);
        this.updateUI();
    }

    handleOpponentFound(data) {
        this.state = 'betting';
        this.roomId = data.roomId;
        this.opponent = data.opponent;
        this.betTimer = data.timer;
        this.myBet = null;
        this.opponentBet = null;
        
        this.updateElement('opponentId', this.opponent.id);
        this.updateElement('opponentBalance', this.opponent.balance);
        
        this.updateUI();
        this.startBettingTimer();
    }

    startBettingTimer() {
        const timerInterval = setInterval(() => {
            this.betTimer--;
            this.updateElement('betTimer', this.betTimer);
            
            if (this.betTimer <= 0) {
                clearInterval(timerInterval);
                if (!this.myBet) {
                    const randomBet = Math.random() > 0.5 ? 'heads' : 'tails';
                    this.makeBet(randomBet);
                    this.showMessage('‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –°–¥–µ–ª–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Å—Ç–∞–≤–∫–∞.');
                }
            }
            
            if (this.state !== 'betting') {
                clearInterval(timerInterval);
            }
        }, 1000);
    }

    handleTimerUpdate(data) {
        this.betTimer = data.timer;
        this.updateElement('betTimer', data.timer);
    }

    handleBetMade(data) {
        if (data.playerId === this.game.playerId) {
            this.myBet = data.bet;
        } else {
            this.opponentBet = data.bet;
        }
        this.updateUI();
    }

    handleCoinFlipStart(data) {
        this.state = 'flipping';
        this.updateUI();
    }

    handleGameResult(data) {
        this.state = 'results';
        
        if (data.balances && data.balances[this.game.playerId]) {
            this.game.balance = data.balances[this.game.playerId];
        }
        
        const isWinner = data.winner === this.game.playerId;
        const message = isWinner ? 
            `üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! +${data.winAmount} ‚ÇΩ` :
            `üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! -${this.game.currentAmount} ‚ÇΩ`;
        
        const resultText = `${message} | –í—ã–ø–∞–ª: ${this.game.getRussianName(data.result)}`;
        
        const multiResult = document.getElementById('multiResult');
        if (multiResult) {
            multiResult.innerHTML = resultText;
            multiResult.className = `result ${isWinner ? 'win' : 'lose'}`;
        }
        
        this.game.addToHistory({
            type: 'pvp',
            bet: this.myBet,
            amount: this.game.currentAmount,
            result: data.result,
            win: isWinner,
            winAmount: isWinner ? data.winAmount : 0,
            commission: data.commission || 0,
            timestamp: new Date()
        });
        
        this.game.updateUI();
        this.updateUI();
        
        setTimeout(() => {
            if (this.state === 'results') {
                this.playAgain();
            }
        }, 10000);
    }

    handleOpponentDisconnected(data) {
        this.showMessage('‚ùå –°–æ–ø–µ—Ä–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∏–≥—Ä—ã');
        this.resetMultiplayer();
    }

    handleSearchCancelled(data) {
        this.state = 'connected';
        this.showMessage('‚úÖ –ü–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω');
        this.updateUI();
    }

    handleError(data) {
        this.showMessage(`‚ùå –û—à–∏–±–∫–∞: ${data.message}`);
    }

    playAgain() {
        this.resetMultiplayer();
    }

    resetMultiplayer() {
        this.state = 'connected';
        this.roomId = null;
        this.opponent = null;
        this.myBet = null;
        this.opponentBet = null;
        this.updateUI();
    }

    disconnect() {
        if (this.socket) {
            this.socket.close(1000, 'Manual disconnect');
        }
        this.state = 'disconnected';
        this.stopPing();
        this.updateConnectionStatus(false);
        this.showMessage('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
    }

    updateUI() {
        const stateElement = document.getElementById('multiplayerState');
        if (!stateElement) return;

        const findBtn = document.getElementById('findOpponentBtn');
        const cancelBtn = document.getElementById('cancelSearchBtn');

        this.updateElement('myBetValue', this.myBet ? this.game.getRussianName(this.myBet) : '-');
        this.updateElement('opponentBetValue', this.opponentBet ? this.game.getRussianName(this.opponentBet) : '-');

        if (findBtn) findBtn.disabled = this.state !== 'connected';
        if (cancelBtn) cancelBtn.style.display = this.state === 'searching' ? 'block' : 'none';

        const disconnectBtn = document.getElementById('disconnectBtn');
        if (!disconnectBtn && this.state === 'connected') {
            const controls = document.querySelector('.multiplayer-controls');
            if (controls) {
                const btn = document.createElement('button');
                btn.id = 'disconnectBtn';
                btn.className = 'cancel-button';
                btn.innerHTML = '<i class="fas fa-plug"></i> –û–¢–ö–õ–Æ–ß–ò–¢–¨–°–Ø';
                btn.onclick = () => this.disconnect();
                controls.appendChild(btn);
            }
        }
    }

    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) element.textContent = value;
    }

    updateConnectionStatus(connected) {
        const statusDot = document.getElementById('statusDot');
        const statusText = document.getElementById('serverStatus');
        
        if (statusDot) {
            statusDot.className = connected ? 'status-dot connected' : 'status-dot';
        }
        if (statusText) {
            statusText.innerHTML = connected ? '<i class="fas fa-check"></i> –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '<i class="fas fa-times"></i> –û—Ç–∫–ª—é—á–µ–Ω–æ';
        }
    }

    showMessage(message) {
        console.log('üí¨:', message);
        const resultElement = document.getElementById('multiResult');
        if (resultElement) {
            resultElement.innerHTML = message;
            resultElement.className = 'result';
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
document.addEventListener('DOMContentLoaded', () => {
    window.game = new CoinFlipCasino();
    
    console.log('üé∞ CoinFlip Casino v2.0 - –° –∑–∞—â–∏—Ç–æ–π –æ—Ç –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª–∞!');
    console.log('üöÄ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!');
});
